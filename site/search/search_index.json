{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Project status: EARLY ALPHA</p> <p>This project is still in the experimental stage, and I don't use anything critical on it.</p>"},{"location":"#hardware","title":"Hardware","text":"<p>Still deciding on Hardware But i want a powerful Server that runs Proxmox or ESXI on it to virtualize at least a Kubernetes Cluster with 2 or 3 Worker Nodes (1 Master - i don't need HA Stuff atm)</p> <p>2 or 3x Lenovo M710Q Tiny They go up to 32GB Ram (16 might be enough but i will go for 32 for proxmox!) 128GB SSD which is perfect and they only consume less than 50W (probably 5W on Idle) Cheap Tiny Client</p> <p>Will use one for OPNSense</p>"},{"location":"#features","title":"Features","text":"<ul> <li> Common applications<ul> <li> Github Runner</li> <li> paperless-ngx</li> <li> n8n</li> <li> ioBroker</li> <li> Node-Red</li> <li> Home Assistant</li> <li> MQTT</li> <li> Kafka</li> <li> Grafana</li> <li> Prometheus</li> <li> Elasticsearch</li> <li> Kibana</li> <li> MySQL</li> <li> Traefik</li> <li> ArgoCD</li> <li> HashiCorp Vault</li> <li> Memos or HedgeDoc or Documize or Docusaurus (still deciding)</li> <li> Shiori</li> <li> Kutt</li> <li> Vikunja</li> <li> Tekton</li> <li> Uptime Kuma</li> </ul> </li> <li> Automated Kubernetes installation</li> <li> Installing and managing applications using GitOps</li> <li> Automatic rolling upgrade for OS and Kubernetes</li> <li> Automatically update apps</li> <li> Modular architecture, easy to add or remove features/components</li> <li> Automated certificate management</li> <li> Automatically update DNS records for exposed services</li> <li> VPN without port forwarding</li> <li> Expose services to the internet securely with Cloudflare Tunnel</li> <li> CI/CD platform<ul> <li> ArgoCD</li> <li> Tekton</li> </ul> </li> <li> Private container registry</li> <li> Distributed storage</li> <li> Support multiple environments (dev, prod)</li> <li> Monitoring and alerting</li> <li> Infrastructure testing</li> </ul>"},{"location":"#services-own-coded","title":"Services (Own Coded)","text":"<ul> <li> Azkaban Gateway</li> <li> Home Inventory System<ul> <li> Categories</li> <li> Items<ul> <li> Locations (where at home is it stored?)</li> <li> Companies (from which company does it come from?)</li> <li> Size (what size does it have?)</li> <li> Type (what type is it? Bottle, Can etc.)</li> </ul> </li> <li> Shoppinglist</li> <li> Discounts<ul> <li> Rewe</li> <li> Lidl</li> <li> Aldi</li> </ul> </li> </ul> </li> <li> Smartmirror</li> <li> Twitch Bot</li> <li> Blog<ul> <li> Tags</li> <li> Posts</li> <li> Comments</li> </ul> </li> <li> Wow-Raid<ul> <li> Guilds</li> <li> Characters</li> <li> Raids</li> <li> Mythic+</li> <li> Drops</li> </ul> </li> </ul>"},{"location":"#tech-stack-for-now","title":"Tech stack (for now)","text":"Logo Name Description    K3s Lightweight distribution of Kubernetes    Helm The Kubernetes package manager    ArgoCD GitOps tool built to deploy applications to Kubernetes    Traefik The Cloud Native Application Proxy    Apache Kafka Open-source distributed event streaming"},{"location":"homelab/hardware/","title":"Homelab Hardware","text":"<ul> <li> <p>1x Fujitsu Esprimo:</p> <ul> <li>Online</li> <li>CPU: <code>4 x Intel(R) Core(TM) i3-4150 CPU @ 3.50GHz</code></li> <li>RAM: <code>8GB</code></li> <li>HDD: <code>300GB</code></li> <li>VMs: <code>2</code> (1x K3s Master, 1x K3S Worker)</li> </ul> </li> <li> <p>1x HP Prodesk 400 G3 SFF i5-6500:</p> <ul> <li>Online</li> <li>CPU: <code>4 x Intel(R) Core(TM) i5-6500 CPU @ 3.60GHz</code></li> <li>RAM: <code>8GB</code></li> <li>SSD: <code>256GB</code></li> <li>VMs: <code>2</code> (2x K3S Worker)</li> </ul> </li> </ul>  <p>Planed for now:</p> <ul> <li>3x Lenovo ThinkCentre M93p:<ul> <li>CPU: <code>4 x Intel(R) Core(TM) i5-4570T CPU @ 3.60GHz</code></li> <li>RAM: <code>8GB</code> / <code>16GB</code> / <code>32GB</code> (Still deciding)</li> <li>SSD: <code>256GB</code></li> <li>Use Cases: OPNSense, Docker</li> </ul> </li> </ul>  <p>Planed in the Future:</p> <ul> <li>1x Dell PowerEdge-Rack-Server R730<ul> <li>RAM: Min. <code>32GB</code> but <code>64GB</code> prefered</li> </ul> </li> </ul>"},{"location":"homelab/ansible/ansible/","title":"Ansible","text":"<p>Service status: ALPHA</p> <p>This service is still in development. Expect Things to break.</p>"},{"location":"homelab/proxmox/cluster/","title":"Proxmox Server Cluster","text":"<ul> <li> <p>1x <code>Kubernetes Server Node</code></p> <ul> <li><code>1 Cores</code></li> <li><code>2 Socket</code></li> <li><code>3GB RAM</code></li> <li><code>Ubuntu Cloud-Init</code></li> </ul> </li> <li> <p>3x <code>Kubernetes Worker Node</code></p> <ul> <li><code>1 Cores</code></li> <li><code>2 Socket</code></li> <li><code>3GB RAM</code></li> <li><code>Ubuntu Cloud-Init</code></li> </ul> </li> </ul>"},{"location":"homelab/proxmox/proxmox/","title":"Proxmox","text":"<p>Service status: ALPHA</p> <p>This service is still in development. Expect Things to break.</p>"},{"location":"homelab/terraform/deploy-master/","title":"Deploy the Master VM","text":"<pre><code>resource \"proxmox_vm_qemu\" \"k3s-master\" {\n  name = \"k3s-master\"\n  desc = \"Kubernetes Master Node\"\n  vmid = \"100\"\n  target_node = \"pve\"\n  agent = 1\n  clone = var.proxmox_clone_name\n  cores = 1\n  sockets = 2\n  memory = 3072\n\n  network {\n    bridge = \"vmbr0\"\n    model = \"virtio\"\n  }\n\n  disk {\n    storage = \"local\"\n    type = \"scsi0\"\n    size = \"50G\"\n  }\n\n  os_type = \"cloud-init\"\n  ipconfig0 = \"ip=192.168.1.150,gw=192.168.1.1\"\n  nameserver = \"192.168.1.1\"\n}\n</code></pre>"},{"location":"homelab/terraform/deploy-worker/","title":"Deploy a Worker VM","text":"<pre><code>resource \"proxmox_vm_qemu\" \"k3s-worker\" {\n  count = 3\n  name = \"k3s-worker-${count.index}\"\n  desc = \"Kubernetes Worker Node\"\n  vmid = var.proxmox_worker_vmid[count.index]\n  target_node = \"pve\"\n  agent = 1\n  clone = var.proxmox_clone_name\n  cores = 1\n  sockets = 2\n  memory = 3072\n\n  network {\n  bridge = \"vmbr0\"\n  model = \"virtio\"\n  }\n\n  disk {\n  storage = \"local\"\n  type = \"scsi0\"\n  size = \"50G\"\n  }\n\n  os_type = \"cloud-init\"\n  ipconfig0 = var.proxmox_worker_ipcfg[count.index]\n  nameserver = \"192.168.1.1\"\n}\n</code></pre>"},{"location":"homelab/terraform/terraform/","title":"Terraform","text":"<p>Service status: ALPHA</p> <p>This service is still in development. Expect Things to break.</p> <p>This is my main.tf File with only the required provider for Proxmox, since every VM runs on a Proxmox Hypervisor</p> <pre><code> terraform {\n   required_version = \"&gt;= 1.3.0\"\n\n   required_providers {\n     proxmox = {\n       source = \"telmate/proxmox\"\n       version = \"2.9.11\"\n     }\n   }\n }\n</code></pre>"},{"location":"services/azkaban/","title":"Azkaban","text":"<p>Service status: ALPHA</p> <p>This service is still in development. Expect Things to break.</p>"},{"location":"services/azkaban/changelog/","title":"Changelog","text":""},{"location":"services/azkaban/todo/","title":"TODO List","text":"<ul> <li> <p> HTTP REST Endpoints with NestJs</p> <ul> <li> Inventory<ul> <li> Category</li> <li> Item</li> <li> Location</li> <li> Company</li> <li> Type</li> <li> Size</li> </ul> </li> <li> Shopping List<ul> <li> Stock (Stock that will soon run out, or that already run out)</li> <li> Recipes (Get Recipes from REWE and attach them to the last Shopping List -&gt; Only Works with Rewe for now)</li> </ul> </li> <li> Authentication<ul> <li> Register (or no Registration, they could be added via Database directly)</li> <li> Login (returns JWT Token)</li> <li> Me (returns encoded JWT Token Data)</li> </ul> </li> <li> Twitch<ul> <li> Channel (Followers)</li> <li> Viewer (How long did a Viewer watched my Channel, what Messages did he send and whats his fav. message)</li> <li> Stream (Last Stream, Streamtitle, Stream Game)</li> <li> Messages (Messages send in Channel)</li> <li> Games (Games streamed)</li> </ul> </li> </ul> </li> <li> <p> Set Permissions for Endpoints</p> </li> <li> Fix Docker Image Versioning (Latest should be replaced with the Github Tag)</li> <li> Create ArgoCD Project for Azkaban (Gateway)</li> <li> Create Pulumi Projekt</li> </ul>"}]}